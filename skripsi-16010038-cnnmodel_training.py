# -*- coding: utf-8 -*-
"""CNNModel_Trial3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15St2_sRO9Px8NArfkME2_tR-zx44AU6h
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Flatten, MaxPooling2D, Dropout
import os

base_directory = '/content/mobil_dataset'
training_directory = os.path.join(base_directory, 'train')
validation_directory = os.path.join(base_directory, 'val')

print(len(os.listdir('/content/mobil_dataset/bukan mobil')))
print(len(os.listdir('/content/mobil_dataset/mobil'))) 

os.listdir('/content/mobil_dataset/train')
os.listdir('/content/mobil_dataset/val')

training_mobil_directory = os.path.join(training_directory, 'mobil')
training_bukan_mobil_directory = os.path.join(training_directory, 'bukan mobil')

validation_mobil_directory = os.path.join(validation_directory, 'mobil')
validation_bukan_mobil_directory = os.path.join(validation_directory, 'bukan mobil')

training_datagenerator = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
validation_datagenerator = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

training_generator = training_datagenerator.flow_from_directory(
        training_directory,  
        target_size=(150, 150),  
        batch_size=16,
        class_mode='binary')
 
validation_generator = validation_datagenerator.flow_from_directory(
        validation_directory, 
        target_size=(150, 150), 
        batch_size=16, 
        class_mode='binary')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit_generator(training_generator,
                    steps_per_epoch=20,  
                    epochs=50,
                    validation_data=validation_generator, 
                    validation_steps=25,  
                    verbose=2)

model.save('/content/drive/My Drive/epoch_50.h5')

